#/bin/bash

GITHOME=$HOME/git
MYCLUBLINKHOME=/home/myclublink


#Add myclublink user to the system
addgroup http
echo "* Adding myclublink user to system"
pass=$(perl -e 'print crypt($ARGV[0], "password")' "3enchm@rk789")
useradd -m -p $pass "myclublink" -G http  #add myclublink to http group


#Add current user to myclublink group
CURRENTUSER="`logname`"
echo "Current user is " $CURRENTUSER
usermod -a -G myclublink $CURRENTUSER 

#Add current user to the http group so they can have access to myclublink directories etc
sudo addgroup $CURRENTUSER http --quiet

echo "* Upating package sources"
#sudo apt-get update 

echo "* Updating all system packages"
#sudo apt-get -y upgrade

echo "* Installing package dependencies"
for dep in git nginx htop vim samba openssh-server curl golang sqlite3 libsqlite3-dev pkg-config; do
	if dpkg -s $dep 2>/dev/null 1>/dev/null; then
		echo $dep " is installed already. Skipping "
	else
		sudo apt-get install $dep -y
	fi
done
echo "- Update done"

echo "* Setting up SSH keys .."
#Generate ssh keys

if [ ! -d $HOME/.ssh ]; then
	sudo -u $CURRENTUSER mkdir -p $HOME/.ssh
	echo "- SSH keys don't exist so I'm creating them in " $HOME/".ssh"
	sudo -u $CURRENTUSER ssh-keygen -b 4096 -t rsa -f $HOME/.ssh/id_rsa -N '' -q
	echo "SSH Keys have been created. "
	#add the ssh public key to the bitbucket repository - TODO set the label as the host. Find a way to generate a unique myclublink host that makes sense
	PUBLICKEY=`cat $HOME/.ssh/id_rsa.pub`
	export PUBLICKEY
	curl "https://bitbucket.org/api/1.0/users/bradmccormack/ssh-keys/" -H "Accept-Encoding: gzip,deflate,sdch" -H "Host: bitbucket.org" -H "Content-Type: application/x-www-form-urlencoded" -H "Accept: */*" -H "Cache-Control: no-cache" -H "Cookie: optimizelyEndUserId=oeu1371266234695r0.6271766992285848; optimizelySegments=%7B%22202765491%22%3A%22false%22%2C%22202916208%22%3A%22gc%22%2C%22202920152%22%3A%22search%22%7D; optimizelyBuckets=%7B%7D; bb_session=93c5927301f7a1a297bb8abafb2d062d; csrftoken=91d40f7b72f3e126367cd9ced6e36851; __utma=254090395.942569903.1371266236.1371266236.1371266236.1; __utmb=254090395.20.10.1371266236; __utmc=254090395; __utmz=254090395.1371266236.1.1.utmcsr=google|utmccn=(organic)|utmcmd=organic|utmctr=(not%20provided); __utmv=254090395.|1=isBBUser=true=1" -H "Connection: keep-alive" -H "Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.3" --data-urlencode "key=$PUBLICKEY" --data-urlencode "label=vmmyclublink"
else
	echo "- SSH keys already in place. I won't create them"
fi

#delete the current config file if one is there
if [ -f $HOME/.ssh/config ]; then
	sudo rm $HOME/.ssh/config
fi

#nuke the default SSH stuff (NOTE THIS SCRIPT SHOULD ONLY RUN ON FRESH MACHINES 

sudo rm $HOME/.gitconfig
sudo -u $CURRENTUSER touch $HOME/.ssh/config
sudo -u $CURRENTUSER touch $HOME/.gitconfig

echo "[user]" >> $HOME/.gitconfig
echo "	email = bradmccormack100@gmail.com" >> $HOME/.gitconfig
echo "	name = Brad mccormack" >> $HOME/.gitconfig

#Set user profile git config stuff
echo "StrictHostKeyChecking no" >> $HOME/.ssh/config

if [ -d $GITHOME ]; then
	cd $GITHOME/myclublink
	echo "- myclublink repo already exists. Pulling latest code"
	sudo -u $CURRENTUSER git clean -f --quiet
        sudo -u $CURRENTUSER git pull --quiet
else
	echo "Current dir is " `pwd`
	sudo -u $CURRENTUSER mkdir -p $GITHOME
	echo "- Cloning repository"
	cd $GITHOME
	echo "Current directory for cloning is " `pwd`
	sudo -u $CURRENTUSER git clone git@bitbucket.org:bradmccormack/myclublink.git
fi

echo "- Code pulled down."

if [ -d "/etc/nginx" ]; then
	echo "* Nginx config being deployed and web server being restarted"
	#create symbolic links that point back to this config. Later it will be trivial to run this script and have updated web server configurations
	
	#delete existing symbolic links if they are there
	if [ -L /etc/nginx/sites-available/internal.myClubLink.com.au.conf ]; then
		echo "deleting sym link 1"
		sudo rm -f /etc/nginx/sites-available/internal.myClubLink.com.au.conf
	fi

	if [ -L /etc/nginx/sites-enabled/internal.myClubLink.com.au.conf ]; then
		echo "deleting sym link 2"
		sudo rm -f /etc/nginx/sites-enabled/internal.myClubLink.com.au.conf
	fi

	if [ -L /etc/nginx/sites-available/dev.myClubLink.com.au.conf ]; then
		echo "deleting dev sym link 1"
		sudo rm -f /etc/nginx/sites-available/dev.myClubLink.com.au.conf
	fi 

	if [ -L /etc/nginx/sites-enabled/dev.myClubLink.com.au.conf ]; then
		echo "deleting dev sym link 2"
		sudo rm -f /etc/nginx/sites-enabled/dev.myClubLink.com.au.conf
	fi

	#copy over all the files

	echo "Copying from " $GITHOME/myclublink " to " $MYCLUBLINKHOME/
	
	sudo cp -Rf $GITHOME/myclublink/* $MYCLUBLINKHOME/
	sudo chown -R myclublink:http $MYCLUBLINKHOME

	echo "Setting up Symbolic links for Configuration files"
	sudo ln -s $MYCLUBLINKHOME/Conf/nginx/internal.myClubLink.com.au.conf /etc/nginx/sites-available/internal.myClubLink.com.au.conf
	sudo ln -s $MYCLUBLINKHOME/Conf/nginx/internal.myClubLink.com.au.conf /etc/nginx/sites-enabled/internal.myClubLink.com.au.conf
	sudo ln -s $MYCLUBLINKHOME/Conf/nginx/dev.myClubLink.com.au.conf /etc/nginx/sites-available/dev.myClubLink.com.au.conf
	sudo ln -s $MYCLUBLINKHOME/Conf/nginx/dev.myClubLink.com.au.conf /etc/nginx/sites-enabled/dev.myClubLink.com.au.conf
	sudo rm /etc/nginx/sites-enabled/default -f
else
	echo "- Nginx didn't install correctly before. Aborting script!"
	exit 1
fi

#create a file share for the installer - TODO put this in a chroot
if [ ! -d "/etc/samba" ]; then
	echo "- Samba didn't install correctly. Aborting script!"
else
	#hose the default one and link to our versioned one and add the curent user to samba
	sudo rm /etc/samba/smb.conf -f
	sudo ln -s $MYCLUBLINKHOME/Conf/samba/smb.conf /etc/samba/smb.conf
	(echo myclublink; echo myclublink) | smbpasswd -s 2>/dev/null 1>/dev/null
	sudo service smbd restart --quiet
	sudo service nmbd restart --quiet
fi

#update the nginx conf with the current users home dir
sudo sed -i "s|{HOME}|${HOME}|g" /etc/nginx/sites-enabled/dev.myClubLink.com.au.conf
sudo sed -i "s|{USER}|${USER}|g" /etc/samba/smb.conf


sudo service nginx restart --quiet

echo "Setting up development environment for backend .."
sudo go get github.com/gorilla/mux
sudo go get github.com/gorilla/securecookie
sudo go get github.com/garyburd/go-websocket/websocket
sudo go get github.com/mattn/go-sqlite3
sudo go get github.com/gorilla/sessions

echo "Building backend .."

if [ ! -d $MYCLUBLINKHOME/bin ]; then 
	sudo -u myclublink mkdir $MYCLUBLINKHOME/bin
fi

#put the binary in /home/myclublink and copy the templates across
sudo -u myclublink go build -o $MYCLUBLINKHOME/bin/mcl $GITHOME/myclublink/backend/src/main/mcl.go
sudo -u myclublink cp -R $GITHOME/myclublink/backend/src/main/templates $MYCLUBLINKHOME/bin/


#Not needed anymore the binary will make the db if it doesn't exist
#if [ ! -f $MYCLUBLINKHOME/bin/backend.db ]; then
#	sudo -u myclublink sqlite3 $MYCLUBLINKHOME/bin/backend.db < $GITHOME/myclublink/backend/src/main/databasesetup.sql
#fi

echo "Cleaning up .."
sudo rm -Rf $MYCLUBLINKHOME/backend
sudo rm -Rf $MYCLUBLINKHOME/platform 

ip=`ifconfig eth0 | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}'`
echo "myClubLink is now running !"
echo "You will need to add " $ip " for internal.myclublink.com.au and dev.myclublink.com.au to DNS server for the users on the local network"

#kill any other existing instances that are running of mcl
killall -15 mcl

cd /home/myclublink/bin && sudo -u myclublink $MYCLUBLINKHOME/bin/mcl
echo "myClubLink binary running from " $MYCLUBLINKHOME/bin/mcl
